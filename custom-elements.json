{
  "version": 2,
  "tags": [
    {
      "name": "b-c-c",
      "description": "Web component that allows basic copying of templates inside Shadow DOM (by default).",
      "jsDoc": "/**\n* Web component that allows basic copying of templates inside Shadow DOM (by default).\n* @element b-c-c\n*\n*/",
      "attributes": [
        {
          "name": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "jsDoc": "/**\r\n         * Any component that emits events should not do so if it is disabled.\r\n         * Note that this is not enforced, but the disabled property is made available.\r\n         * Users of this mix-in should ensure not to call \"de\" if this property is set to true.\r\n         * @attr\r\n         */",
          "type": "boolean"
        },
        {
          "name": "noclear",
          "description": "Don't clear previous contents with each copy",
          "jsDoc": "/**\n     * Don't clear previous contents with each copy\n     * @attr\n     */",
          "type": "boolean"
        },
        {
          "name": "noshadow",
          "description": "Don't use shadow DOM",
          "jsDoc": "/**\n    * Don't use shadow DOM\n    * @attr\n    */",
          "type": "boolean | undefined"
        },
        {
          "name": "from",
          "description": "Id of template to import.\nIf from has no slash, the search for the matching template is done within the shadow DOM of the c-c element.\nIf from starts with \"../\" then the search is done one level up, etc.",
          "jsDoc": "/**\n     * Id of template to import.\n     * If from has no slash, the search for the matching template is done within the shadow DOM of the c-c element.\n     * If from starts with \"../\" then the search is done one level up, etc.\n     * @attr\n     */",
          "type": "any"
        },
        {
          "name": "copy",
          "description": "Must be true / present for template copy to proceed.",
          "jsDoc": "/**\n     * Must be true / present for template copy to proceed.\n     * @type{boolean}\n     * @attr\n     */",
          "type": "boolean | undefined"
        }
      ],
      "properties": [
        {
          "name": "val",
          "type": "\"set\" | \"remove\""
        },
        {
          "name": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "jsDoc": "/**\r\n         * Any component that emits events should not do so if it is disabled.\r\n         * Note that this is not enforced, but the disabled property is made available.\r\n         * Users of this mix-in should ensure not to call \"de\" if this property is set to true.\r\n         * @attr\r\n         */",
          "type": "boolean"
        },
        {
          "name": "evCount",
          "description": "Tracks how many times each event type was called.",
          "jsDoc": "/**\r\n         * Tracks how many times each event type was called.\r\n         */",
          "type": "{ [key: string]: number; }"
        },
        {
          "name": "asIs",
          "type": "\"\" | \"-changed\""
        },
        {
          "name": "noclear",
          "description": "Don't clear previous contents with each copy",
          "jsDoc": "/**\n     * Don't clear previous contents with each copy\n     * @attr\n     */",
          "type": "boolean"
        },
        {
          "name": "noshadow",
          "description": "Don't use shadow DOM",
          "jsDoc": "/**\n    * Don't use shadow DOM\n    * @attr\n    */",
          "type": "boolean | undefined"
        },
        {
          "name": "from",
          "description": "Id of template to import.\nIf from has no slash, the search for the matching template is done within the shadow DOM of the c-c element.\nIf from starts with \"../\" then the search is done one level up, etc.",
          "jsDoc": "/**\n     * Id of template to import.\n     * If from has no slash, the search for the matching template is done within the shadow DOM of the c-c element.\n     * If from starts with \"../\" then the search is done one level up, etc.\n     * @attr\n     */",
          "type": "any"
        },
        {
          "name": "copy",
          "description": "Must be true / present for template copy to proceed.",
          "jsDoc": "/**\n     * Must be true / present for template copy to proceed.\n     * @type{boolean}\n     * @attr\n     */",
          "type": "boolean | undefined"
        }
      ],
      "events": [],
      "slots": [],
      "cssProperties": []
    },
    {
      "name": "c-c",
      "description": "Dependency free web component that allows copying templates.",
      "jsDoc": "/**\n*  Dependency free web component that allows copying templates.\n*  @element c-c\n*\n*/",
      "attributes": [
        {
          "name": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "jsDoc": "/**\r\n         * Any component that emits events should not do so if it is disabled.\r\n         * Note that this is not enforced, but the disabled property is made available.\r\n         * Users of this mix-in should ensure not to call \"de\" if this property is set to true.\r\n         * @attr\r\n         */",
          "type": "boolean"
        },
        {
          "name": "noclear",
          "description": "Don't clear previous contents with each copy",
          "jsDoc": "/**\r\n     * Don't clear previous contents with each copy\r\n     * @attr\r\n     */",
          "type": "boolean"
        },
        {
          "name": "noshadow",
          "description": "Don't use shadow DOM",
          "jsDoc": "/**\r\n    * Don't use shadow DOM \r\n    * @attr\r\n    */",
          "type": "boolean"
        },
        {
          "name": "from",
          "description": "Id of template to import.\r\nIf from has no slash, the search for the matching template is done within the shadow DOM of the c-c element.  \r\nIf from starts with \"../\" then the search is done one level up, etc.",
          "jsDoc": "/**\r\n     * Id of template to import.\r\n     * If from has no slash, the search for the matching template is done within the shadow DOM of the c-c element.  \r\n     * If from starts with \"../\" then the search is done one level up, etc.\r\n     * @attr\r\n     */",
          "type": "string"
        },
        {
          "name": "copy",
          "description": "Must be true / present for template copy to proceed.",
          "jsDoc": "/**\r\n     * Must be true / present for template copy to proceed.\r\n     * @type{boolean}\r\n     * @attr\r\n     */",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "val",
          "type": "\"set\" | \"remove\""
        },
        {
          "name": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "jsDoc": "/**\r\n         * Any component that emits events should not do so if it is disabled.\r\n         * Note that this is not enforced, but the disabled property is made available.\r\n         * Users of this mix-in should ensure not to call \"de\" if this property is set to true.\r\n         * @attr\r\n         */",
          "type": "boolean"
        },
        {
          "name": "evCount",
          "description": "Tracks how many times each event type was called.",
          "jsDoc": "/**\r\n         * Tracks how many times each event type was called.\r\n         */",
          "type": "{ [key: string]: number; }"
        },
        {
          "name": "asIs",
          "type": "\"\" | \"-changed\""
        },
        {
          "name": "noclear",
          "description": "Don't clear previous contents with each copy",
          "jsDoc": "/**\r\n     * Don't clear previous contents with each copy\r\n     * @attr\r\n     */",
          "type": "boolean"
        },
        {
          "name": "noshadow",
          "description": "Don't use shadow DOM",
          "jsDoc": "/**\r\n    * Don't use shadow DOM \r\n    * @attr\r\n    */",
          "type": "boolean"
        },
        {
          "name": "from",
          "description": "Id of template to import.\r\nIf from has no slash, the search for the matching template is done within the shadow DOM of the c-c element.  \r\nIf from starts with \"../\" then the search is done one level up, etc.",
          "jsDoc": "/**\r\n     * Id of template to import.\r\n     * If from has no slash, the search for the matching template is done within the shadow DOM of the c-c element.  \r\n     * If from starts with \"../\" then the search is done one level up, etc.\r\n     * @attr\r\n     */",
          "type": "string"
        },
        {
          "name": "copy",
          "description": "Must be true / present for template copy to proceed.",
          "jsDoc": "/**\r\n     * Must be true / present for template copy to proceed.\r\n     * @type{boolean}\r\n     * @attr\r\n     */",
          "type": "boolean"
        },
        {
          "name": "strPropsAttr",
          "type": "any"
        },
        {
          "name": "objPropsAttr",
          "type": "any"
        }
      ],
      "events": [],
      "slots": [],
      "cssProperties": []
    }
  ]
}